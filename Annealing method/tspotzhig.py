import numpy as np
import random
import math


INF = float('inf')

cost_matrix = np.array([
    [INF, 2451, 713, 1018, 1631, 1374, 2408, 213, 2571, 875, 1420, 2145, 1972],
    [2451, INF, 1745, 1524, 831, 1240, 959, 2596, 403, 1589, 1374, 357, 579],
    [713, 1745, INF, 355, 920, 803, 1737, 851, 1858, 262, 940, 1453, 1260],
    [1018, 1524, 355, INF, 700, 862, 1395, 1123, 1584, 466, 1056, 1280, 987],
    [1631, 831, 920, 700, INF, 663, 1021, 1769, 949, 796, 879, 586, 371],
    [1374, 1240, 803, 862, 663, INF, 1681, 1551, 1765, 547, 225, 887, 999],
    [2408, 959, 1737, 1395, 1021, 1681, INF, 2493, 678, 1724, 1891, 1114, 701],
    [213, 2596, 851, 1123, 1769, 1551, 2493, INF, 2699, 1038, 1605, 2300, 2099],
    [2571, 403, 1858, 1584, 949, 1765, 678, 2699, INF, 1744, 1645, 653, 600],
    [875, 1589, 262, 466, 796, 547, 1724, 1038, 1744, INF, 679, 1272, 1162],
    [1420, 1374, 940, 1056, 879, 225, 1891, 1605, 1645, 679, INF, 1017, 1200],
    [2145, 357, 1453, 1280, 586, 887, 1114, 2300, 653, 1272, 1017, INF, 504],
    [1972, 579, 1260, 987, 371, 999, 701, 2099, 600, 1162, 1200, 504, INF]
])

N = 13

# Функция для вычисления общей стоимости (длины) маршрута
def calculate_cost(route):
    total_cost = 0
    # Проходим по каждому городу в маршруте
    for i in range(len(route)):
        # Добавляем стоимость пути между текущим городом и следующим по кругу (модуль % len(route) позволяет вернуться в начало маршрута)
        total_cost += cost_matrix[route[i], route[(i + 1) % len(route)]]
    return total_cost

# Функция для оптимизации маршрута с использованием метода имитации отжига
def simulated_annealing():
    # Начальный маршрут — случайная перестановка городов
    current_route = list(range(N))
    random.shuffle(current_route)

    # Вычисляем стоимость начального маршрута
    current_cost = calculate_cost(current_route)

    # Начальная температура
    T = 1000
    # Минимальная температура
    T_min = 1
    # Коэффициент уменьшения температуры (альфа)
    alpha = 0.99

    # Переменные для сохранения лучшего найденного маршрута и его стоимости
    best_route = current_route[:]
    best_cost = current_cost

    # Основной цикл имитации отжига
    while T > T_min:
        # Создаём новый маршрут, меняя два случайных города местами
        new_route = current_route[:]
        i, j = random.sample(range(1, N), 2)  # Выбираем две случайные позиции для обмена
        new_route[i], new_route[j] = new_route[j], new_route[i]

        # Вычисляем стоимость нового маршрута
        new_cost = calculate_cost(new_route)
        # Разница в стоимости между новым и текущим маршрутом
        cost_diff = new_cost - current_cost

        # Если новый маршрут лучше (меньшая стоимость), принимаем его
        # Если новый маршрут хуже, принимаем его с вероятностью, зависящей от разности в стоимости и текущей температуры
        if cost_diff < 0 or random.uniform(0, 1) < math.exp(-cost_diff / T):
            current_route = new_route
            current_cost = new_cost

            # Если текущий маршрут оказался лучше всего найденного, обновляем лучшее решение
            if current_cost < best_cost:
                best_cost = current_cost
                best_route = current_route[:]

        # Понижаем температуру
        T *= alpha

    # Возвращаем лучший найденный маршрут и его стоимость
    return best_route, best_cost

# Выполняем алгоритм имитации отжига
best_route, best_cost = simulated_annealing()

# Выводим лучший маршрут и его стоимость
print("Лучший маршрут:", best_route)
print("Стоимость маршрута:", best_cost)

