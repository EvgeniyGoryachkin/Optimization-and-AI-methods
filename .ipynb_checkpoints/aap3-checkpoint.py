import random
import math
from collections import defaultdict
import numpy as np
import matplotlib.pyplot as plt
# Карта еды, где 1 - еда, 0 - пустая ячейка
map_grid = [
[0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
[0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
[0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
];

rows = len(map_grid)
cols = len(map_grid[0])

# Начальные параметры для алгоритма отжига
initial_temperature = 1000
cooling_rate = 0.99
min_temperature = 1e-3


# Функция для вычисления тороидальных координат
def toroidal_position(x, y):
    return x % rows, y % cols

def check_for_food(x, y, visited):
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Право, Вниз, Лево, Вверх
    for dx, dy in directions:
        nx, ny = toroidal_position(x + dx, y + dy)
        if map_grid[nx][ny] == 1 and (nx, ny) not in visited:
            return (nx, ny)
    return None

def generate_neighbor(position, visited_count):
    x, y = position
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    random.shuffle(directions)  # Перемешиваем направления для случайного выбора

    # Находим клетку с минимальным количеством посещений
    min_visited = float('inf')
    best_move = position

    for dx, dy in directions:
        new_x, new_y = toroidal_position(x + dx, y + dy)
        if visited_count[(new_x, new_y)] < min_visited:
            min_visited = visited_count[(new_x, new_y)]
            best_move = (new_x, new_y)

    return best_move

# Функция симуляции с автоматом и отжигом
def visualize_path_and_food(map_grid, path):
    # Создаем карту для визуализации
    map_copy = np.array(map_grid)

    # Добавляем путь муравья
    for step in path:
        x, y = step
        map_copy[x][y] = 2  # Пути муравья помечены как 2

    # Визуализируем карту с едой и путем муравья
    plt.figure(figsize=(10, 10))
    plt.imshow(map_copy, cmap='coolwarm', interpolation='nearest')
    plt.colorbar(label="0 - Пусто, 1 - Еда, 2 - Путь муравья")
    plt.title("Путь муравья и еда")
    plt.show()


# Добавляем визуализацию в основную функцию
def ant_simulation_with_visualization():
    # Начальная позиция муравья (0, 0)
    current_position = (0, 0)
    path = [current_position]
    visited_count = defaultdict(int)  # Счётчик посещений клеток
    visited_count[current_position] += 1  # Начальная клетка

    current_score = 0  # Счётчик собранной еды
    temperature = initial_temperature

    for i in range(100):
        # Проверка на наличие еды в соседних ячейках
        next_position = check_for_food(*current_position, visited_count)

        # Если еда найдена рядом, муравей движется туда
        if next_position:
            current_position = next_position
        else:
            # Иначе используется отжиг для выбора соседней клетки
            neighbor_position = generate_neighbor(current_position, visited_count)
            current_position = neighbor_position

        # Проверка на еду в текущей позиции
        x, y = current_position
        if map_grid[x][y] == 1:
            current_score += 1
            map_grid[x][y] = 0  # Убираем еду после её сбора

        # Обновление пути и счётчика посещений
        path.append(current_position)
        visited_count[current_position] += 1

        # Понижение температуры
        temperature *= cooling_rate

    # Визуализация пути муравья
    visualize_path_and_food(map_grid, path)

    return path, current_score


# Запуск алгоритма с визуализацией
print( best_score_with_visualization = ant_simulation_with_visualization())